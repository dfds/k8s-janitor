# Default values for k8s-janitor.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
managedByHelm: true
environment: "develop"

image:
  repository: 579478677147.dkr.ecr.eu-central-1.amazonaws.com/ded/k8s-janitor
  pullPolicy: Always
  tag: "latest"

app:
  config:
    kafkaSecretRef: k8s-janitor-kafka-credentials

  environment:
    - name: AWS_S3_BUCKET_REGION
      value: $(AWS_S3_BUCKET_REGION)
    - name: AWS_S3_BUCKET_NAME_CONFIG_MAP
      value: $(AWS_S3_BUCKET_NAME_CONFIG_MAP)
    - name: CONFIG_MAP_FILE_NAME
      value: $(CONFIG_MAP_FILE_NAME)
    - name: KUBERNETES_SERVICE_KAFKA_BOOTSTRAP_SERVERS
      value: $(KUBERNETES_SERVICE_KAFKA_BOOTSTRAP_SERVERS)
    - name: KUBERNETES_SERVICE_KAFKA_BROKER_VERSION_FALLBACK
      value: "0.10.0.0"
    - name: KUBERNETES_SERVICE_KAFKA_API_VERSION_FALLBACK_MS
      value: "0"
    - name: KUBERNETES_SERVICE_KAFKA_SASL_USERNAME
      valueFrom:
        secretKeyRef:
          name: k8s-janitor-kafka-credentials
          key: username
    - name: KUBERNETES_SERVICE_KAFKA_SASL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: k8s-janitor-kafka-credentials
          key: password
    - name: KUBERNETES_SERVICE_KAFKA_GROUP_ID
      value: "$(KUBERNETES_SERVICE_KAFKA_GROUP_ID)"
    - name: KUBERNETES_SERVICE_KAFKA_ENABLE_AUTO_COMMIT
      value: "false"
    - name: KUBERNETES_SERVICE_KAFKA_SASL_MECHANISMS
      value: "PLAIN"
    - name: KUBERNETES_SERVICE_KAFKA_SECURITY_PROTOCOL
      value: "SASL_SSL"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  awsRoleArn: ""
  # Annotations to add to the service account
  annotations:
    eks.amazonaws.com/sts-regional-endpoints: "true"
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  metricsPort: 8080
  scrapeMetrics: true

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  match: Host(`localhost`)
  matches:
    - name: k8s-janitor
      match: Host(`build.dfds.cloud`) && PathPrefix(`/api`)
      prefix: "/api"
    - name: k8s-janitor-pub
      match: Host(`api.hellman.oxygen.dfds.cloud`) && PathPrefix(`/ssu/api`)
      prefix: "/ssu/api"
  middlewares: []
  services: []
  routes: []
    # - kind: Rule
    #   match: Host(`build.dfds.cloud`)
    #   priority: 90
    #   middlewares: []
    #   services:
    #     - kind: Service
    #       name: k8s-janitor
    #       namespace: selfservice
    #       port: external

resources:
  requests:
    memory: "200Mi"
    cpu: "100m"
  limits:
    memory: "400Mi"
    cpu: "200m"


nodeSelector: {}

tolerations: []

affinity: {}
